java is a general purpose programming language made for developers to write once and run anywhere
that is compied java code can run on almost all platforms
java is a platform independent and works on different platforms(windows,Mac,Linux etc)
advantages
It has a large demand in several projects
It is easy to learn and simple to use
It is open-source and free
It is secure,fast and powerful
java is a object-oriented language which gives a clear structure to programs
and allows code to be resused , loweing development costs

-> with the java 8 release,java provided supports for functional programming 
new methods, new APIs for date time manipulation,new streaming API etc.

spring boot 2 ---> minimum version java 8 

for spring boot 3 , we require minimum java 17

Java Terminology 

java development kit -- jdk is a complete java development kit that includes everything 
including compiler , java runtime environment (JRE) , java debuggers ,java docs etc.
for the program to execute in java 
we need to install JDK on our computer in oder to create , compile and run the java program

java runtime environment - JDK includes JRE. JRE installation on our computers allows the java program to run,
however we cannot compile it . jre includes jvm ,applet support ,and plugins. For 
running the java program , a computer needs JRE.

java virtual machine -- In the running phase of a program , JVM executes the byte code 
generated by the compiler. The function of java virtual machine is to execute the byte code 
produced by the compiler. Every operating system  has a different JVM but the 
output they produce after the execution of bytecode  is the same across all 
operating systems. That is wh java is known as  platform-independent language

byte code - as discussed , the javac compiler of JDK compiles the java source code 
into byte code so that it can be executed by JVM. It is saved .class file by the compiler

classPath - The classpath is the file path where the java run time and java compiler
look for .class files to load. By default, JDK provides many libraries . If you want to include external libraries 
to include external libraries they should be added to classpath

garbage collector -- in java programs can't delete  objects . to delete or recollect 
that memory JVM has a program called Garbage collector. Garbage collectors can recollect the objects 
that are not referenced.

Java variables and data Types

variables are containers for storing data types
A variable in java has to be defined with a type , for e.g
int age = 25;
String name = "James"

Data types are thus divided  into two grups:
primitive data types -- include byte,short , int , long , float , double , boolean and char
Non-primitive data types --
such as String,Arrays,Classes and interfaces

primitive types are predefined in java (already defined in java) 
non primitive tpes can be defined in java or created by the programmer as well.
A primitive type has always a value , while non-primitive types can be null.

Primitive data types

byte -- 1 byte 
short -- 2 bytes
int -- 4 bytes
long -- 8 bytes
float -- 4 bytes
double -- 8 bytes
boolean -- 1 bit 
char - 2 bytes 

Java operators

operators are used to perform operations on variables and values

java divides the operators into the following groups 

Arthmetic operators -- +,-,*,/,%,++,--
Assignment operators -- =,+=,-=,*=,/=
Comparison operators -- ==,!=,<,>,<=,>=
logical operators -- true false - && ,||, !
bitwise operators -- bitwise operators work on binary digits or bits of input values.

java contol flow 

if else
switch 
while loop
for loop

method overloading

with method overloading ,multiple methods can have the same name with different parameters:
int myMethod(int x)
float myMethod(float x)
double myMethod(double x,double y)
multiple methods can have the same name as long as the number
and / or type of parameters are different.

object oriented programming
everything in java is associated with classes and objects , along with its attributes 
and methods.
For wxample: in real life , a car is an object 
The car has attributes such as weight and color, and methods such as drive and bake

object oriented programming languages like java bind related  data and functions into an object 
and encourages reuse of these objects within the same and other programs to reduce complexity
by creating a clear structure for programs and reusable code 

classes and objects are the two main aspects of object-oriented programming

so a class is a template for objects ,and an object is an instance of a class

when the individual objects are created , they inherit all the variables and methods from the class

we need understand the below OOPs concepts that java supports 

encapsulation 
inheritance
abstraction
polymorphism

encapsulation -- encapsulation is a way of restricting the access of our data memebers 
by hiding the implementation details
encapsulation also provides a way for data hiding 
the user will have no idea about the inner impleemntation of the class
It will not be visible to the user how the class is storing the values in the variables
the use will only know that we are passing the values to a setter method
and variables are getting intialized with that value.

In java,encapsulation is achieved by declaring the instance variables  of a class as private,
which means they can only be accesssed within the class.To allow outside access to instance variables, 
public methods called getters and setters are defined , which are used to retrieve and modify the values of the instance variables

Inheritance

inheritance is an important pillar of oop
it is the mechanism in java by which one class is allowed to inherit the features
(fields and methods) of another class . In java, inheritance means creating new classes 
based on existing ones.
A class that inherits  from another class can reuse the methods and fields of that class.
in addition , you can add new fields and methods to your current class as well.


Importance of inheritance 

code reusability : the code written in the superclass is common to all subclasses 
child classes can directly use the parent class code.

method overriding: 
method overriding  is achievable only inheritance is achievalble only through inheritance 
it is one of the ways by which java achieves run time polynorphism

abstarction: the concept of abstract where we do not have to provide all details 
is achieved through inheritance.abstarction only shows the functionality to the user.

abstraction

abstraction is a process of hiding the implementation details and showing only functionality  to the user.
an abstarct class must be declared with an abstract keyword
it can have abstract and non-abstarct methods 
it cannot be instantiated 
it can have constructors and static methods also
it can have final methods whcih will foce the subclass not to change the bdy of the method
a method which is declared as abstract and does not have implementation is know as abstarct method

java interfaces

another way to achieve abstarction in java , is with interfaces 
an interface is a completely "abstract class" that is used to group related methods 
with empty bodies

To access the interface methods,the interface must be implemented by another class
with the implements keyword

like abstract classes, interfaces cannot be used to create

prior to java 8 ,interface methods do not have a body - the body is provided 
by the "implement" class

On implementation of an interface , you must overide all of its methods

interface metgods are by default public and abstarct

interface attribues are by default public ,static final


Functional programming and lambdas

java 8 enabled the concept of functional programming by introducing  and supporting lambda 
expressions

Functional programming  is a programming pradigm
where functions are first-class citizens,meaning that they can be passed around as values ,
stored in variables or data structures ,and used in arguments or return values of other functions
One of the main benefits of the function interface is that it allows you to write code that is more concise and expressive. By defining functions as values and passing them around as arguments or return values, developers can create more modular and reusable code. Also, by using lambdas to define functions, Java code can be more expressive and easier to read.

functional interfaces(java.util.function)

a functional interfaces is an interface that contains only one abstract method.they can have only one functionality 
to exhibit.
from java 8 onwards,lambda expressions can be used to represent the instance of a functional interface .a functional interface 
can have any number of default methods

Runnable,Action Listener,Comparable are some of the examples of functional interfaces

functional interfaces are used and executed by representing the interface with an annotation called 
@Functional interface

we can also call lambda expressions as the instance of lambda expession


Functional interfaces

since java se 1.8 onwards there many interfaces that are converted into functional interfaces 
all these interfaces are annotated with @Functional interface 
these interfaces are as follows-- 

runnable -- the interface only contains the run() method
comparable --> the interface contains the compareTo() method
Action listener _-> this interface only contains the actionPerformed() metgod
callable --> the interface only contains the call method


java SE 8 included four main kinds of functional interfaces whcih can be applied in multiple 
situations as mentoned below :
Consumer
Predicate
Function 
Supplier

lambda expressions 

a lambda expression is a short block of code which takes in parameters and return a value.
a value. lambda expressions  are similar to methods , but they do not need a 
name and they can be implemented right in the body of the method.

they have to immediatel return a value ,and they cannot contain varaibales 
assignments or statements such as if or for
In order to do  more complex operations ,a code block can be used with curly braces.
if a lambda expression needs to return a value ,the code block should have a return statement.

lambda expressions can be stored in varaiables if the variable's type which has only one metgod.
the lambda expression should have the same number of paramaters and same return type as that method.






































